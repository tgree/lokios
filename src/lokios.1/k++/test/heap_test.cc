#include "../heap.h"
#include "kern/kassert.h"
#include "tmock/tmock.h"
#include <vector>

static uint64_t unsorted[] = {
    5348143246242264759U,  5177841320952229490U,  18314874294901963553U,
    18329021337179044916U, 2863493462733046394U,  1474179452908045113U,
    9728507484038684402U,  15297565252741334801U, 7172603433793638633U,
    6137543974106712231U,  2606012939359927532U,  6697281542789566294U,
    14136123427750789692U, 1889866177667698485U,  13899755160123547546U,
    158473854127908925U,   3255686866180357042U,  7363693453610430483U,
    5995941077254774310U,  13172073729271831619U, 2816454185709291154U,
    15821989847356972469U, 3667673352289628414U,  2406097274458645962U,
    16953336158990332275U, 1508413926762475764U,  12761863881795824819U,
    2228637649612286440U,  18021793853434783484U, 12055299697284679495U,
    3701640372879985040U,  9800223693216787743U,  820503570934051031U,
    17273654005766225673U, 5187930867383476423U,  7391241868589089571U,
    5022510572958168610U,  2680258536359251222U,  15096542797592697308U,
    7487547825113128702U,  15874581981109060505U, 16955513889609682288U,
    10331321927948507354U, 12221264090115876043U, 17724408532758296180U,
    11969551497158194717U, 12686243977031950924U, 10108652403002574225U,
    13977965880698852745U, 9764660563277502136U,  4585679009838385808U,
    2438313951837164819U,  2690875123227085195U,  8858734852717700592U,
    14755993554085194414U, 15876873306731207704U, 4322782588150942200U,
    12908668676219322026U, 8249507356242249810U,  6242879175861420454U,
    3590856021272482590U,  10529505104718202895U, 6562556860929724735U,
    3519886655119207331U,  9024308103385636902U,  9119475711907595461U,
    628723085193055972U,   10023228734451811515U, 17297720569164861532U,
    14762254659146613901U, 9649342976882148355U,  4071035467551236755U,
    8071775796420828616U,  12564904614560838178U, 17990232158220747954U,
    10098212089517543403U, 17908441716727932584U, 12089549622339388482U,
    3745762795569650378U,  6636335561763662944U,  12811698310399060959U,
    12146683302820224830U, 17978599480276005105U, 8596506319685128236U,
    3062818833589731897U,  4151412767871280937U,  6409014862883956040U,
    15449263102422324838U, 1424041189634504844U,  5655632857543853663U,
    14434904205800204499U, 13335285705790475522U, 12915684116696778907U,
    1117003441072254254U,  14376826713242518068U, 18059244139052326149U,
    2341949525730744502U,  4725262279963623277U,  5198426872830050498U,
    5076940979161609199U,  14896174112748267235U, 6100227874920312209U,
    6086071843404710944U,  16787610829667187851U, 396451834957816679U,
    9961394205039295557U,  3578013027031720940U,  8593945589366738097U,
    2952721407353647936U,  6491644829783454222U,  4285000448586299231U,
    17952483584172847999U, 3001994775718695469U,  7895840326011240686U,
    12951849359810727491U, 544641389391780892U,   7648994145879941123U,
    7406752259977446583U,  4204242734194395650U,  7499891805773168115U,
    5300300986769881057U,  5945360659621610973U,  17886580996153038664U,
    337877981927391222U,   15579802547403153288U, 5262260931170981968U,
    8221671206608844148U,  3645357088317219939U,
};

using kernel::_kassert;

class tmock_test
{
    TMOCK_TEST(test_max_heap_insert)
    {
        kernel::max_heap<std::vector<uint64_t>> h;
        for (auto val : unsorted)
        {
            h.insert(val);
            kassert(h.is_heap());
            for (auto v2 : h.c)
                kassert(h.front() >= v2);
        }
    }

    TMOCK_TEST(test_max_heap_remove)
    {
        kernel::max_heap<std::vector<uint64_t>> h;

        for (auto val : unsorted)
            h.insert(val);
        kassert(h.is_heap());

        while (!h.empty())
        {
            h.pop_front();
            kassert(h.is_heap());
            for (auto v : h.c)
                kassert(h.front() >= v);
        }
    }

    TMOCK_TEST(test_min_heap_insert)
    {
        kernel::min_heap<std::vector<uint64_t>> h;
        for (auto val : unsorted)
        {
            h.insert(val);
            kassert(h.is_heap());
            for (auto v2 : h.c)
                kassert(h.front() <= v2);
        }
    }

    TMOCK_TEST(test_min_heap_remove)
    {
        kernel::min_heap<std::vector<uint64_t>> h;

        for (auto val : unsorted)
            h.insert(val);
        kassert(h.is_heap());

        while (!h.empty())
        {
            h.pop_front();
            kassert(h.is_heap());
            for (auto v : h.c)
                kassert(h.front() <= v);
        }
    }
};

TMOCK_MAIN();
