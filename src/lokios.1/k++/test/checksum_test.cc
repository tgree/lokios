#include "../checksum.h"
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <tmock/tmock.h>

using kernel::md5sum;

static uint8_t data[] = {
                  0x33, 0xff, 0x31, 0x35, 0xb8, 0x66, 0x85, 0xa6,
                  0xde, 0x7d, 0xed, 0xea, 0x1e, 0x50, 0xf5, 0x40,
                  0xfe, 0x1e, 0xe0, 0x40, 0x58, 0xe8, 0xf1, 0xaa,
                  0x92, 0xa3, 0x25, 0x1d, 0x96, 0x27, 0x70, 0xfe,
                  0x6e, 0x8b, 0x28, 0x89, 0xea, 0x19, 0xc6, 0x5b,
                  0xb4, 0xb7, 0x16, 0xd1, 0x18, 0xb2, 0xef, 0xbd,
                  0x87, 0xc4, 0xfb, 0x67, 0xbf, 0x25, 0x81, 0x98,
                  0x29, 0xe7, 0x9f, 0x12, 0x86, 0x92, 0xc5, 0x57,
                  0x22, 0x26, 0x19, 0xfe, 0xef, 0xbc, 0xa9, 0x93,
                  0x78, 0xe2, 0x2c, 0x73, 0x8f, 0xcf, 0x48, 0x1d,
                  0xc7, 0x25, 0xb4, 0xf6, 0xaa, 0x6f, 0xff, 0xbb,
                  0x67, 0x77, 0x6a, 0xf1, 0xab, 0x9d, 0xc6, 0xd7,
                  0x94, 0x7d, 0x37, 0xc4, 0x31, 0xab, 0xc1, 0x56,
                  0x11, 0xc0, 0x5a, 0x30, 0x0d, 0x12, 0x18, 0xc5,
                  0xeb, 0x31, 0x3e, 0x49, 0xd1, 0x18, 0xa6, 0x8b,
                  0x13, 0x12, 0x9d, 0xe8, 0xfc, 0x49, 0x6b, 0x35,
                  0xbc, 0x17, 0x67, 0x65, 0x3e, 0xb0, 0x30, 0xd8,
                  0xa6, 0x20, 0x69, 0x5a, 0xa0, 0xf9, 0xcc, 0xf8,
                  0x5b, 0xa4, 0x89, 0xdb, 0xd7, 0xdf, 0xfa, 0x76,
                  0x04, 0x03, 0x6f, 0xeb, 0xd6, 0x14, 0x80, 0xcf,
                  0x8b, 0xe3, 0xfe, 0x1f, 0x8a, 0xb0, 0x23, 0xbf,
                  0xcf, 0x32, 0xb2, 0x9e, 0x06, 0xcc, 0x66, 0x3b,
                  0x1d, 0xae, 0x60, 0x96, 0xe0, 0x67, 0xb6, 0xa0,
                  0xef, 0xc8, 0x42, 0xcf, 0x18, 0xc3, 0x61, 0x9b,
                  0x2b, 0x07, 0x75, 0xf9, 0x13, 0xb6, 0x8c, 0xcf,
                  0x16, 0x3b, 0x56, 0xca, 0x66, 0xe0, 0x61, 0x57,
                  0xbe, 0x7e, 0x9a, 0x5c, 0x11, 0xe8, 0xb7, 0x18,
                  0xc6, 0x06, 0x77, 0x0a, 0x10, 0x74, 0x3d, 0x76,
                  0x11, 0xcf, 0xf9, 0x91, 0x82, 0x30, 0xb6, 0xd4,
                  0xa1, 0x4e, 0x97, 0x8a, 0xc4, 0x2f, 0x47, 0x6f,
                  0x5f, 0xdc, 0xae, 0x3d, 0xbe, 0x52, 0x2c, 0x7e,
                  0xaf, 0xd9, 0x1e, 0x99, 0x8c, 0xe3, 0x2f, 0x6a,
                  0xa7, 0x3b, 0x50, 0x23, 0x2f, 0xe7, 0x4d, 0xb2,
                  0xd4, 0x75, 0x2a, 0x38, 0xb7, 0xaa, 0xb2, 0x47,
                  0x35, 0xa8, 0x87, 0x24, 0xc3, 0xd6, 0xe3, 0x2c,
                  0xc5, 0xeb, 0x83, 0x8c, 0x5f, 0x65, 0xf8, 0xbf,
                  0x22, 0x8d, 0x40, 0xd3, 0xc4, 0xd7, 0x68, 0xc0,
                  0x70, 0xe6, 0x57, 0x9c, 0x10, 0x4d, 0x76, 0x5d,
                  0x5d, 0x4a, 0x00, 0x40, 0xb5, 0x9f, 0x66, 0x1d,
                  0x7e, 0x44, 0x7b, 0x8c, 0xd5, 0x39, 0x80, 0x44,
                  0x63, 0x5e, 0x50, 0xc6, 0x8f, 0x11, 0xd4, 0xf6,
                  0xb9, 0x5c, 0xe1, 0xd2, 0x79, 0x12, 0x61, 0x6e,
                  0xd1, 0xcf, 0x48, 0x4b, 0xc2, 0x01, 0x19, 0xbe,
                  0x94, 0x30, 0x27, 0xff, 0xc5, 0x78, 0xe0, 0x2e,
                  0xc4, 0x81, 0x97, 0x6c, 0xe6, 0x00, 0x68, 0xc1,
                  0x34, 0xe8, 0x9e, 0x94, 0x7c, 0x91, 0x24, 0xdb,
                  0xce, 0x94, 0x33, 0x78, 0x16, 0x4f, 0x04, 0xe5,
                  0x32, 0xd6, 0x09, 0xd8, 0xbf, 0x8c, 0x7d, 0x70,
                  0xd6, 0xf9, 0x36, 0xc5, 0xff, 0xa0, 0x4c, 0x8d,
                  0xdc, 0x4f, 0x61, 0x76, 0x03, 0xf3, 0x9f, 0xe1,
                  0x04, 0x86, 0x92, 0x3c, 0xa9, 0xc0, 0xd3, 0x85,
                  0xd2, 0x9f, 0x54, 0x5d, 0xbe, 0x83, 0x75, 0xc9,
                  0xed, 0xd8, 0x3c, 0xd3, 0x4e, 0x98, 0x4c, 0x2d,
                  0x08, 0x4a, 0x75, 0xc3, 0x93, 0x96, 0x1e, 0x42,
                  0x7b, 0x32, 0xf7, 0x79, 0x4a, 0xa1, 0x43, 0x4f,
                  0xf0, 0x3d, 0x1a, 0x65, 0xd8, 0x26, 0xec, 0x0e,
                  0x32, 0x8a, 0xb8, 0x68, 0xc3, 0x82, 0x1f, 0xb5,
                  0x53, 0x53, 0x03, 0x4d, 0xca, 0x1c, 0x20, 0xb2,
                  0x8c, 0x33, 0xdc, 0x55, 0xe5, 0x14, 0x80, 0x7f,
                  0x84, 0x16, 0x48, 0x40, 0x99, 0xdf, 0x51, 0x7f,
                  0xf4, 0xed, 0x2e, 0xaa, 0xcf, 0x59, 0x83, 0xde,
                  0x9d, 0x86, 0x72, 0xbe, 0xe2, 0xd9, 0x02, 0x21,
                  0x7c, 0xd5, 0x2d, 0xb9, 0x09, 0x78, 0x9c, 0xb7,
                  0x69, 0x7c, 0x9b, 0x66, 0x50, 0x8b, 0x07, 0x64};
static_assert(sizeof(data) == 512);

class tmock_test
{
    TMOCK_TEST(test_empty)
    {
        uint8_t expected[16] = {0xd4, 0x1d, 0x8c, 0xd9, 0x8f, 0x00, 0xb2, 0x04,
                                0xe9, 0x80, 0x09, 0x98, 0xec, 0xf8, 0x42, 0x7e};
        uint8_t digest[16];
        md5sum(NULL,0,digest);
        tmock::assert_mem_same(digest,expected);
    }

    TMOCK_TEST(test_quick_brown_fox)
    {
        uint8_t expected[16] = {0x9e, 0x10, 0x7d, 0x9d, 0x37, 0x2b, 0xb6, 0x82,
                                0x6b, 0xd8, 0x1d, 0x35, 0x42, 0xa4, 0x19, 0xd6};
        uint8_t digest[16];
        md5sum("The quick brown fox jumps over the lazy dog",43,digest);
        tmock::assert_mem_same(digest,expected);
    }

    TMOCK_TEST(test_quick_brown_fox2)
    {
        uint8_t expected[16] = {0xe4, 0xd9, 0x09, 0xc2, 0x90, 0xd0, 0xfb, 0x1c,
                                0xa0, 0x68, 0xff, 0xad, 0xdf, 0x22, 0xcb, 0xd0};
        uint8_t digest[16];
        md5sum("The quick brown fox jumps over the lazy dog.",44,digest);
        tmock::assert_mem_same(digest,expected);
    }

    TMOCK_TEST(test_512_bytes)
    {
        const char* digests[] = {
        "\xa1\x4c\x65\x5f\x1f\x4c\xb3\x64\xa3\xc2\xde\x92\x65\xb7\x36\x6a",
        "\xef\x49\x89\x74\xe7\xf5\x12\x24\x0e\x87\xaf\xe4\x4c\x52\x06\xc1",
        "\x4c\xed\x96\x8d\x46\x71\x5c\x39\x58\x79\xcc\x42\x83\x32\x8c\xf9",
        "\x06\x1f\x07\x8c\x8d\x8d\xaf\xed\xa2\x8f\x5a\x34\x4c\xc5\xeb\x6b",
        "\xc3\xd1\x22\x79\xca\x4b\xc3\x4b\x3f\x70\x3c\xb9\xe3\x7e\x3c\xf9",
        "\xd8\x69\x7d\x40\xad\x2f\x64\xbd\xad\xfd\xcd\xb5\xac\xf0\x9e\x18",
        "\x01\x71\xb0\x10\x15\x78\xff\x4c\x10\xec\x88\x04\xc7\x68\xc6\x9d",
        "\x3d\x13\xbd\x8a\x4c\x4a\x38\x4d\x54\x1f\x58\xa3\xea\xd5\x63\xa6",
        "\x44\xe6\x32\xa5\xb7\x98\x4a\x9e\x6c\xad\x94\x63\x0c\x7e\xf3\x61",
        "\x08\x1e\x67\xf9\xaa\x10\xda\x06\xb1\x38\x8c\x65\x0e\xa7\x46\x99",
        "\x7e\x97\x98\x0f\x37\x42\xdd\x80\x02\xb0\x80\x01\x0e\x48\x69\x28",
        "\x89\x96\xc1\xee\x3d\x0d\x6f\x12\xe3\xb6\x8f\xc7\x9c\x6f\x5a\x19",
        "\x50\x61\x64\x92\x10\x6f\x91\xe3\x93\x5c\x6a\x99\xfa\xc3\x50\xd5",
        };
        TASSERT(NELEMS(digests) == 13);
        for (size_t i=500; i<=512; ++i)
        {
            uint8_t digest[16];
            md5sum(data,i,digest);
            tmock::assert_mem_same(digest,digests[i-500],sizeof(digest));
        }
    }
};

TMOCK_MAIN();
